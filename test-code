#!/bin/bash

# Find the right CWD, around here...


function main() {
  ssh_config
  start_vms
  #stop_vms
}


function start_vms() {
  mkvm_pids=()
  for host in "${hosts[@]}"; do
    start_vm "${host}" &
    mkvm_pids+=( "${!}" )
  done
  for mkvm_pid in "${mkvm_pids[@]}"; do
    wait "${mkvm_pid}" || echo "ERROR (unhandled):   PID ${mkvm_pid} returned:  ${?}" >&2
  done
}


function start_vm() {
  host="${1}"
  port="${ports_by_host[$host]}"
  bin/mkvm "${port}"
}


function stop_vms() {
  for host in "${hosts[@]}"; do
    port="${ports_by_host[$host]}"
    ssh -p "${port}" root@localhost shutdown -h now ||
      ssh -p "${port}" ansible@localhost sudo shutdown -h now ||
        echo "ERROR (unhandled):  Failed to issue shutdown command to host ${host} on port ${port}." >&2
  done
}


function ssh_config() {
  echo "Authenticate for sudo."
  sudo -v
  ./bin/deploy-role-to-localhost ssh-client

  {
    echo 'StrictHostKeyChecking no'
    echo 'GlobalKnownHostsFile /dev/null'
    sed 's/HostName .*$/HostName localhost/g' /etc/ssh/ssh_config
  }  > state/test-ssh_config
}


#hosts=( $(
#  tail -n +2 inventory/inventory.d/server
#) )
hosts=(
  'synapse'
  'usher'
)

declare -A ports_by_host
for host in "${hosts[@]}"; do
  port=$(
    sed -E \
      '/^Host '"${host}"'/ {:start; g; n; /Port / {s/^ *Port ([0-9]+)/\1/; p}; /^ / b start}; d' \
      state/test-ssh_config \
      | grep . \
      | head -n 1
  )
  ports_by_host+=( "${host}" "${port}" )
done

# Might be good to check for duplicate ports.


main "${@}"
