#!/bin/bash
#
# mkvm <port>
#
# Should be safe to run in parallel, but not if the same port is specified more
# than once.

#arch='armhf'
arch='amd64'
os='debian'
release='bookworm'
version='12.5.0'
mem_mb='1024'

case "${arch}" in
  'i386')
    initrd_path='install.386'
    ;;
  'amd64')
    initrd_path='install.amd'
    ;;
  *)
    fail "Unrecognized architecture:  '${arch}'"
    ;;
esac


function main() {
  if ! test 1 = "${#}"; then
    fail "Wrong number of arguments.  Just specify a port number."
  fi
  if ! grep -qE '^[0-9]+$' <<< "${1}"; then
    fail "Invalid argument.  Just specify a port number."
  fi
  port="${1}"
  self_name="${0##*/}"

  bin_path="${0%/*}"
  cd "${bin_path}" || fail "Failed to change directory to executable path:  '${bin_path}'"
  cd .. || fail "Failed to changed directory above executable path."


  state='state'
  images="${state}/images"
  unpack="${state}/installer_unpack_${port}"

  installer_image_original="/storage/bittorrent/content/${os}-${version}-${arch}-netinst.iso"
  installer_image="${images}/preseed-${os}-${version}-${arch}-${port}-netinst.iso"
  target_image="${images}/${arch}-${os}-${release}-${port}.qcow"
  
  mkvm
  runvm &

  while ! \
    sshpass \
    -d 3 \
    ssh \
      -o \
      -p "${port}" \
      root@localhost \
      whoami \
    3< <(pass show aaron/virtualization/root) \
    > /dev/null
  do
    sleep 1
    echo -n '.'
  done
}


function mkvm() {
  state_structure
  generate_preseed
  unpack_image
  unpack_initrd
  inject_preseed
  repack_initrd
  configure_boot
  regenerate_checksums
  repack_image
  create_target
  install
}


function state_structure() {
  mkdir -p "${state}" || fail "Failed to create state directory:  '${state}'"
  mkdir -p "${images}" || fail "Failed to create images directory:  '${images}'"
  if test -e "${unpack}"; then
    chmod -R u+rwX "${unpack}" || fail "Failed to prepare installer unpack directory for deletion:  '${unpack}'"
    rm -rf "${unpack}" || fail "Failed to remove installer unpack directory:  '${unpack}'"
  fi
  mkdir -p "${unpack}" || fail "Failed to create installer unpack directory:  '${unpack}'"
}


function fail() {
  printf '%s\n' "${1}" >&2
  exit "${2:-1}"
}


function generate_preseed() {
  # Designate a preseed file.
  cp "files/conf/preseed/unattended/${arch}-${os}-${release}.cfg" "${state}/preseed.${port}.cfg" || fail "Failed to copy preseed file."
  # Populate sensitive elements of preseed file.
  sed -i "s/password \$/password $(pass show 'aaron/virtualization/root')/" "${state}/preseed.${port}.cfg" || fail "Failed to inject password into preseed file."
}


function unpack_image() {
  7z x -o"${unpack}/" "${installer_image_original}" || fail "Failed to unpack installer image:  '${installer_image}'"
}


function unpack_initrd() {
  chmod +w -R "${unpack}/${initrd_path}"/ || fail "Failed to set write permission for initrd file."
  gunzip "${unpack}/${initrd_path}"/initrd.gz || fail "Failed to unpack initrd file."
}


function inject_preseed() {
  cd "${state}" || fail "Failed to enter state directory:  '${state}'"
  echo preseed.cfg | cpio -H newc -o -A -F "${unpack#$state/}/${initrd_path}/initrd" || fail "Failed to append preseed file to initrd file."
  cd "${OLDPWD}" || fail "Failed to exit state directory."
}


function repack_initrd() {
  gzip "${unpack}/${initrd_path}"/initrd || fail "Failed to repack initrd file."
  chmod -w -R "${unpack}/${initrd_path}"/ || fail "Failed to revoke write permission for initrd file."
}


function configure_boot() {
  sed -i '/include gtk/ {d};' "${unpack}"/isolinux/menu.cfg || fail "Failed to remove GTK installer boot option."
  sed -i '/include spk/ {d};' "${unpack}"/isolinux/menu.cfg || fail "Failed to remove speech synthesis features from boot menu."
  sed -i -E 's/^(label install)/default install\n\1/' "${unpack}"/isolinux/txt.cfg || fail "Failed to make non-graphical installer boot option default."
  echo 'timeout 10' >> "${unpack}/isolinux/txt.cfg" || fail "Failed to add timeout option to boot menu."
}


function regenerate_checksums() {
  cd "${unpack}" || fail "Failed to enter installer unpack directory:  '${unpack}'"
  alg='md5'
  checksum="${alg}sum"
  checksum_file="${checksum}.txt"
  chmod +w "${checksum_file}" || fail "Failed to set write permission on checksum file:  '${checksum_file}'"
  find -follow -type f ! -name "${checksum_file}" -print0 | xargs -0 "${checksum}" > "${checksum_file}"
  chmod -w "${checksum_file}" || fail "Failed to revoke write permissions on checksum file:  '${checksum_file}'"
  cd "${OLDPWD}" || fail "Failed to exit installer unpack directory."
}


function repack_image() {
  rm -rf "${installer_image}" || fail "Failed to remove existing installer image:  '${installer_image}'"
  genisoimage \
    -r -J \
    -b "isolinux/isolinux.bin" \
    -c "isolinux/boot.cat" \
    -no-emul-boot \
    -boot-load-size 4 \
    -boot-info-table \
    -o "${installer_image}" \
    "${unpack}/" \
    || fail "Failed to generate installer image:  '${installer_image}'"

  isohybrid "${installer_image}" || fail "Failed to make installer image bootable:  '${installer_image}'"
}


function create_target() {
  if test -e "${target_image}"; then
    rm "${target_image}" || fail "Failed to remove existing OS image file:  '${target_image}'"
  fi
  if ! test -e "${images}"; then
    mkdir -p "${images}" || fail "Failed to create images directory:  '${images}'"
  fi
  qemu-img create -f qcow2 "${target_image}" 3G || fail "Failed to create target disk image:  '${target_image}'"
}


function install() {
    run \
    -cdrom "${installer_image}" \
    -boot once=d \
    || fail "Failed to install."
}


function run() {
  qemu-system-amd64 \
    -nic user,hostfwd=tcp::"${port}"-:22 \
    -machine pc \
    -cpu max \
    -m "${mem_mb}" \
    -hda "${target_image}" \
    -nographic \
    "${@}"
}


main "${@}"
